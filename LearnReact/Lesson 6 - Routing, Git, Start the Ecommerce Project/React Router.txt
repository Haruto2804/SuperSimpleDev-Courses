Chắc chắn rồi\! Dưới đây là toàn bộ kiến thức chi tiết về **React Router**, từ khái niệm cơ bản, cách cài đặt, cho đến các hook và kỹ thuật nâng cao.

### 1\. React Router là gì và tại sao cần nó? 🧐

Trong một ứng dụng web truyền thống, khi bạn nhấp vào một liên kết, trình duyệt sẽ gửi yêu cầu đến máy chủ và tải một trang HTML hoàn toàn mới. Điều này gây ra hiện tượng "chớp trang" (full page reload).

React tạo ra các **Ứng dụng trang đơn (Single Page Application - SPA)**. Trong một SPA, toàn bộ ứng dụng được tải về chỉ một lần. Khi người dùng điều hướng, thay vì tải lại toàn bộ trang, React chỉ cần cập nhật các thành phần (component) cần thiết trên giao diện.

➡️ **React Router** là thư viện giúp quản lý việc điều hướng này. Nó đồng bộ giao diện người dùng (UI) với URL trên thanh địa chỉ của trình duyệt, cho phép người dùng di chuyển qua lại giữa các "trang" khác nhau trong ứng dụng của bạn mà không cần tải lại trang.

-----

### 2\. Cài đặt 📦

Để sử dụng React Router trong dự án của bạn, hãy mở terminal và chạy lệnh sau:

**Sử dụng npm:**

```bash
npm install react-router-dom
```

**Sử dụng yarn:**

```bash
yarn add react-router-dom
```

*Lưu ý: Chúng ta cài đặt `react-router-dom` vì nó chứa mọi thứ cần thiết cho việc định tuyến trong ứng dụng web, bao gồm cả lõi của `react-router`.*

-----

### 3\. Thiết lập cơ bản và các thành phần cốt lõi 🏗️

Để React Router hoạt động, bạn cần "bọc" toàn bộ ứng dụng của mình trong một component Router.

#### a. `BrowserRouter`

Đây là component bạn sẽ sử dụng ở cấp cao nhất. Nó sử dụng History API của HTML5 để giữ cho UI của bạn đồng bộ với URL.

Trong file `src/index.js` hoặc `src/main.jsx` của bạn:

```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    {/* Bọc toàn bộ ứng dụng trong BrowserRouter */}
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
```

#### b. `Routes` và `Route`

Đây là hai thành phần chính để định nghĩa các tuyến đường (routes) của bạn.

  * `<Routes>`: Là component cha, chứa một hoặc nhiều component `<Route>`. Nó sẽ tìm trong các `<Route>` con của mình để khớp với URL hiện tại và chỉ render `<Route>` đầu tiên khớp.
  * `<Route>`: Dùng để định nghĩa một tuyến đường cụ thể. Nó có hai props quan trọng:
      * `path`: Một chuỗi xác định đường dẫn URL (ví dụ: `/about`, `/products/:id`).
      * `element`: Component sẽ được render khi URL khớp với `path`.

**Ví dụ trong file `App.js`:**

```jsx
import { Routes, Route } from 'react-router-dom';
import HomePage from './pages/HomePage';
import AboutPage from './pages/AboutPage';
import ContactPage from './pages/ContactPage';

function App() {
  return (
    <div>
      {/* Nơi định nghĩa các tuyến đường */}
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/about" element={<AboutPage />} />
        <Route path="/contact" element={<ContactPage />} />
      </Routes>
    </div>
  );
}

export default App;
```

#### c. `Link` và `NavLink` 🔗

Để người dùng có thể điều hướng, bạn không thể dùng thẻ `<a>` thông thường vì nó sẽ gây tải lại trang. Thay vào đó, hãy sử dụng `<Link>`.

  * `<Link>`: Render ra một thẻ `<a>` nhưng khi được nhấp vào, nó sẽ thay đổi URL mà không cần tải lại trang. Prop quan trọng nhất là `to`.

**Ví dụ tạo một thanh điều hướng (Navigation Bar):**

```jsx
import { Link } from 'react-router-dom';

function Navigation() {
  return (
    <nav>
      <ul>
        <li><Link to="/">Trang chủ</Link></li>
        <li><Link to="/about">Giới thiệu</Link></li>
        <li><Link to="/contact">Liên hệ</Link></li>
      </ul>
    </nav>
  );
}
```

  * `<NavLink>`: Là một biến thể đặc biệt của `<Link>`. Nó biết được khi nào nó đang "active" (tức là URL hiện tại khớp với prop `to` của nó). Điều này rất hữu ích để tạo kiểu cho liên kết đang hoạt động.

**Ví dụ sử dụng `NavLink` để tạo kiểu cho link active:**

```jsx
import { NavLink } from 'react-router-dom';
import './Navigation.css'; // File CSS chứa class 'active-link'

function Navigation() {
  return (
    <nav>
      <ul>
        <li>
          <NavLink 
            to="/" 
            className={({ isActive }) => isActive ? 'active-link' : ''}
          >
            Trang chủ
          </NavLink>
        </li>
        <li>
          <NavLink 
            to="/about" 
            className={({ isActive }) => isActive ? 'active-link' : ''}
          >
            Giới thiệu
          </NavLink>
        </li>
      </ul>
    </nav>
  );
}
```

-----

### 4\. Các Hooks quan trọng trong React Router 🪝

Hooks cho phép bạn truy cập vào trạng thái của router (như vị trí hiện tại, tham số URL) từ bất kỳ component nào.

#### a. `useParams()`: Lấy tham số động từ URL

Rất hữu ích cho các trang chi tiết, ví dụ: `/users/123` hoặc `/products/iphone-15`.

**1. Định nghĩa Route với tham số động (dùng dấu `:`):**

```jsx
// trong App.js
import UserProfile from './pages/UserProfile';

<Routes>
  {/* ... các route khác */}
  <Route path="/users/:userId" element={<UserProfile />} />
</Routes>
```

**2. Lấy giá trị tham số trong component:**

```jsx
// trong file UserProfile.js
import { useParams } from 'react-router-dom';

function UserProfile() {
  // useParams() trả về một object chứa các tham số động từ URL
  const { userId } = useParams();

  return (
    <div>
      <h1>Thông tin người dùng</h1>
      <p>ID người dùng là: {userId}</p>
      {/* Bây giờ bạn có thể dùng userId để fetch dữ liệu từ API */}
    </div>
  );
}
```

#### b. `useNavigate()`: Điều hướng theo lập trình

Đôi khi, bạn muốn chuyển hướng người dùng sau một hành động nào đó (ví dụ: sau khi đăng nhập thành công, hoặc sau khi submit form).

```jsx
import { useNavigate } from 'react-router-dom';

function LoginForm() {
  const navigate = useNavigate();

  const handleLogin = (event) => {
    event.preventDefault();
    // Logic xác thực người dùng ở đây...
    // Giả sử đăng nhập thành công
    
    // Chuyển hướng đến trang dashboard
    navigate('/dashboard'); 
  };

  return (
    <form onSubmit={handleLogin}>
      {/* ... các input của form */}
      <button type="submit">Đăng nhập</button>
    </form>
  );
}
```

Bạn cũng có thể điều hướng lùi lại một trang: `Maps(-1)`.

#### c. `useLocation()`: Lấy thông tin về URL hiện tại

Hook này trả về một object `location` chứa thông tin về URL hiện tại, như `pathname`, `search` (query string), và `hash`.

```jsx
import { useLocation } from 'react-router-dom';

function SomeComponent() {
  const location = useLocation();

  console.log('Pathname hiện tại:', location.pathname); // ví dụ: "/products"
  console.log('Query string:', location.search); // ví dụ: "?category=electronics"

  return <div>Kiểm tra console log!</div>;
}
```

-----

### 5\. Kỹ thuật nâng cao: Nested Routes và Outlet 🗺️

Nested Routes (Route lồng nhau) rất hữu ích để xây dựng các layout phức tạp, ví dụ như một trang dashboard có sidebar cố định và phần nội dung thay đổi.

  * `<Outlet>`: Là một component đặc biệt, hoạt động như một "chỗ giữ chỗ" (placeholder). Khi một route lồng được khớp, component con của nó sẽ được render tại vị trí của `<Outlet>`.

**Ví dụ về layout Dashboard:**

**1. Định nghĩa các Route lồng nhau trong `App.js`:**

```jsx
import DashboardLayout from './layouts/DashboardLayout';
import Profile from './pages/Profile';
import Settings from './pages/Settings';

<Routes>
  <Route path="/dashboard" element={<DashboardLayout />}>
    {/* Các route con sẽ được render bên trong Outlet của DashboardLayout */}
    <Route path="profile" element={<Profile />} /> {/* URL sẽ là /dashboard/profile */}
    <Route path="settings" element={<Settings />} /> {/* URL sẽ là /dashboard/settings */}
  </Route>
</Routes>
```

**2. Tạo component `DashboardLayout.js` với `<Outlet>`:**

```jsx
import { Link, Outlet } from 'react-router-dom';

function DashboardLayout() {
  return (
    <div className="dashboard-container">
      <aside className="sidebar">
        {/* Sidebar cố định */}
        <nav>
          <Link to="/dashboard/profile">Thông tin cá nhân</Link>
          <Link to="/dashboard/settings">Cài đặt</Link>
        </nav>
      </aside>
      
      <main className="content">
        {/* Nội dung của các route con (Profile, Settings) sẽ được render ở đây */}
        <Outlet />
      </main>
    </div>
  );
}

export default DashboardLayout;
```

### 6\. Xử lý trang "Không tìm thấy" (404 Not Found) 🚫

Để hiển thị một trang 404 cho bất kỳ URL nào không khớp, hãy tạo một Route với `path="*"` và đặt nó ở cuối cùng trong component `<Routes>`.

```jsx
import NotFoundPage from './pages/NotFoundPage';

<Routes>
  <Route path="/" element={<HomePage />} />
  <Route path="/about" element={<AboutPage />} />
  {/* ... các route khác */}

  {/* Route này sẽ khớp với bất kỳ URL nào không khớp ở trên */}
  <Route path="*" element={<NotFoundPage />} />
</Routes>
```

Hy vọng hướng dẫn chi tiết này sẽ giúp bạn nắm vững React Router và áp dụng hiệu quả vào các dự án React của mình\!